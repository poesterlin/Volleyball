org: philipoe
app: volleyball
service: Registration

provider:
  name: aws
  runtime: nodejs14.x
  stage: production
  region: eu-central-1
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SQS:DeleteMessage
        - SQS:GetQueueAttributes
        - SQS:ReceiveMessage
      Resource: "*"
  environment:
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./config/key.pem)}
    trainer: ${file(./config/trainer.json)}
    queue_url: ${param:db_pw}
    db_pw: ${param:db_pw} # url encode
    db_user: ${param:db_user}
    auth_client: ${param:auth_client}
    email_key: ${param:email_key}

package:
  include:
    - config/**
    - node_modules/**
  exclude:
    - package.json
    - email/**

functions:
  # auth
  verify-token:
    handler: auth-handler.auth

  # courses
  get_courses:
    handler: courses-handler.get
    events:
      - http:
          method: GET
          path: courses
          cors: true

  new_course:
    handler: courses-handler.create
    events:
      - http:
          method: POST
          path: courses
          cors: true
          authorizer: verify-token

  delete_courses:
    handler: courses-handler.delete
    events:
      - http:
          method: DELETE
          path: courses
          cors: true
          authorizer: verify-token

  detailed_courses:
    handler: courses-handler.details
    events:
      - http:
          method: GET
          path: courses/details
          cors: true
          authorizer: verify-token

  # registrations
  get_registration:
    handler: registration-handler.get
    events:
      - http:
          method: GET
          path: registration
          cors: true

  cancel_registration:
    handler: registration-handler.cancel
    events:
      - http:
          method: DELETE
          path: registration
          cors: true

  notify:
    handler: registration-handler.notify
    events:
      - http:
          method: POSt
          path: registration/notify
          cors: true

  create_registration:
    handler: registration-handler.create
    events:
      - http:
          method: POST
          path: registration
          cors: true

  test_queue:
    handler: registration-handler.testQueue
    events:
      - http:
          method: GET
          path: registration/test
          cors: true

  register_trainer:
    handler: registration-handler.trainer
    events:
      - sqs:
          arn: arn:aws:sqs:region:XXXXXX:myQueue
          batchSize: 1
          maximumBatchingWindow: 60

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
